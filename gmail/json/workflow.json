{
  "name": "Build Mails JSON",
  "nodes": [
    {
      "parameters": {
        "jsCode": "const all = $input.all();\nlet emails = [];\nlet summary = {};\n\nfor (const item of all) {\n  if (item.json.emails) {\n    emails = item.json.emails;\n  }\n  \n  if (item.json.text && typeof item.json.text === 'string') {\n    try {\n      summary = { ...summary, ...JSON.parse(item.json.text) };\n    } catch (e) {}\n  } else if (item.json.output) {\n    summary = item.json.output;\n  }\n}\n\nsummary.total = emails.length;\nif (!summary.day) summary.day = new Date().toISOString().slice(0, 10);\n\nreturn [{ json: { ...summary, emails } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1648,
        -528
      ],
      "id": "19986f3f-3c96-466c-91c1-d65dd07b1e53",
      "name": "Code in JavaScript (2)"
    },
    {
      "parameters": {
        "jsCode": "const text = JSON.stringify($json, null, 2);\nreturn [{\n  json: {},\n  binary: {\n    data: {\n      data: Buffer.from(text, 'utf8').toString('base64'),\n      mimeType: 'application/json',\n      fileName: 'mails-today.json',\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1872,
        -528
      ],
      "id": "9e8d374e-9b23-4c1e-85b7-be4299bc8ada",
      "name": "Code in JavaScript (3)"
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "simple": false,
        "filters": {
          "labelIds": [
            "INBOX"
          ],
          "q": "newer_than:1d -category:promotions",
          "readStatus": "both"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        912,
        -528
      ],
      "id": "31901aa6-6d10-4f29-84dc-1ffd605e6c7b",
      "name": "Get many messages",
      "webhookId": "4ab26d8a-cfda-43ac-b5e9-cf1cd309e1c4",
      "credentials": {
        "gmailOAuth2": {
          "id": "q4hJVooUE2TW494h",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-3.5-turbo-16k",
          "mode": "list",
          "cachedResultName": "gpt-3.5-turbo-16k"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1216,
        -368
      ],
      "id": "e9bd5b57-95b6-417c-a256-e1ea49edabf4",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "ozT0bZhT5P9f8G4A",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 18
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        320,
        -528
      ],
      "id": "049bd237-78f6-4871-beab-53a99e23ce35",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "jsCode": "// === Agrégation & nettoyage pour le LLM ===\nconst MAX_EMAILS  = 20;\nconst MAX_SUBJECT = 140;\n\nfunction header(e, name) {\n  const h = e?.payload?.headers?.find(\n    (x) => (x.name || \"\").toLowerCase() === name.toLowerCase()\n  );\n  return h?.value || \"\";\n}\n\nconst emails = $input.all().map(({ json: e }) => {\n  const fromObj = e.from?.value?.[0] || {}; // structure Gmail\n  const fromRaw = e.from || header(e, \"From\") || \"\";\n  const fromDisplay = fromObj.name || fromObj.address || fromRaw;\n\n  const subject = (e.subject || header(e, \"Subject\") || \"\").slice(0, MAX_SUBJECT);\n  const dateStr = e.date || header(e, \"Date\") ||\n    (e.internalDate ? new Date(Number(e.internalDate)).toISOString() : \"\");\n\n  // Ajout d’un ID unique par mail\n  const id = header(e, \"Message-ID\") || e.id || e.internalDate || \"\";\n\n  return { \n    id,\n    from: fromDisplay, \n    subject, \n    date: dateStr,\n    snippet: subject\n  };\n});\n\n// Tri anti-chronologique + limite\nemails.sort((a, b) => (b.date || \"\").localeCompare(a.date || \"\"));\nreturn [{ json: { emails: emails.slice(0, MAX_EMAILS) } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1056,
        -528
      ],
      "id": "3fde0903-97b4-42cd-a9ab-37d78d6be5ba",
      "name": "Code in JavaScript (1)"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "refresh-mails",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        320,
        -688
      ],
      "id": "f79d23d8-a68f-4afe-9fec-8d249eed9ba0",
      "name": "Webhook",
      "webhookId": "6790abc8-7ad8-48a8-b93c-7a7b27e1dede"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        320,
        -352
      ],
      "id": "97294002-29ae-4584-a497-c837f8d4faa7",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.trigger}}",
                    "rightValue": "webhook",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "ed5125ce-1b57-47be-b80f-ec72198ba91a"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "af302061-b64a-4096-a5f9-6bf4db0606b2",
                    "leftValue": "={{$json.trigger}}",
                    "rightValue": "manual",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "99dff7c2-db9c-43fc-949f-a39449226132",
                    "leftValue": "={{$json.trigger}}",
                    "rightValue": "schedule",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        2176,
        -544
      ],
      "id": "badd3d31-8fcc-410f-9bfd-2f1df5cade05",
      "name": "Switch"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"ok\": true,\n  \"trigger\": \"={{$json.trigger}}\",\n  \"updatedAt\": \"={{$now}}\"\n}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        2336,
        -560
      ],
      "id": "fec5f83c-be77-4509-bcc8-7c75e340e33a",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Tu es un assistant personnel. Analyse les emails de l'utilisateur et rédige un briefing naturel.\n\nEMAILS REÇUS AUJOURD'HUI :\n{{ JSON.stringify($json.emails) }}\n\nANALYSE VRAIMENT le contenu et génère ce JSON :\n\n{\n  \"day\": \"{{ new Date().toISOString().slice(0,10) }}\",\n  \"total\": {{ $json.emails.length }},\n  \"top_senders\": [\"liste des 5 expéditeurs les plus fréquents ou importants\"],\n  \"key_topics\": [\"5 vrais thèmes détectés dans les sujets (1-2 MOTS COURTS, max 15 car, ex: 'emploi', 'formation', 'sécurité')\"],\n  \"urgency_level\": \"faible ou moyenne ou élevée (selon le contenu réel)\",\n  \"priority_emails\": [\"0 à 3 emails vraiment importants résumés naturellement (max 60 car chacun)\"],\n  \"categories\": {\"catégories détectées\": nombre},\n  \"action_items\": [\"0 à 5 actions concrètes à faire selon les emails (max 80 car)\"],\n  \"tl_dr\": \"UN VRAI briefing personnalisé basé sur le CONTENU réel. Commence par une accroche adaptée au contexte (ex: si calme→'Journée tranquille', si chargé→'Pas mal d'activité', si urgent→'Attention !', etc.). Mentionne les VRAIS noms et sujets des emails. Max 300 car.\"\n}\n\nREGLES :\n✅ LIS les emails, ne devine pas\n✅ Adapte le ton du tl_dr au contexte (calme/chargé/urgent)\n✅ Utilise les VRAIS noms d'expéditeurs (pas 'Anne' si c'est 'LinkedIn')\n✅ priority_emails : seulement si vraiment important (humains directs > offres > notifs)\n✅ action_items : seulement si actionnable (pas 'lire' mais 'répondre à X', 'postuler', etc.)\n✅ key_topics : STRICTEMENT 1-2 mots (pas de phrases longues)\n✅ Tutoiement naturel\n\nRETOURNE UNIQUEMENT LE JSON.",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1216,
        -528
      ],
      "id": "2b42966e-ef54-4641-aaae-d2013841db9c",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "content": "## Fusion des entrées",
        "height": 640,
        "width": 592,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        240,
        -784
      ],
      "typeVersion": 1,
      "id": "e474355e-79a5-4b1b-be16-3ac2e3adb15f",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Analyse et LLM",
        "height": 640,
        "width": 928,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        864,
        -784
      ],
      "typeVersion": 1,
      "id": "65855c1d-b66d-45b5-8121-06d97aacfd19",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Routage et réponse",
        "height": 640,
        "width": 720,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1824,
        -784
      ],
      "typeVersion": 1,
      "id": "3d2952aa-309d-4197-89b1-0d2d82680186",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Déclencheurs\n\nTrois modes d’entrée : **Webhook**, **Schedule**, **Manual Execute**.\n\n- **Webhook** : activer le workflow puis exécuter la commande :\n  ```bash\n  curl -X POST http://localhost:5678/webhook/refresh-mails\n- **Schedule** : le flux démarre automatiquement selon la planification définie.\n- **Manual Execute** : changer le mode dans l’éditeur et lancer directement.",
        "height": 256,
        "width": 592,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        240,
        -1072
      ],
      "typeVersion": 1,
      "id": "d67160bf-ebf8-43d6-8d51-6de657a218a1",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Récupération & Analyse\n\nLes mails sont récupérés avec Gmail, nettoyés en **JavaScript**, puis analysés et classés via **OpenAI LLM**.\n\n- **Gmail** : nécessite une configuration via Google Cloud Console  \n  👉 [https://console.cloud.google.com/apis/dashboard?project=gen-lang-client-0001397937](https://console.cloud.google.com/apis/dashboard?project=gen-lang-client-0001397937)\n\n- **OpenAI** : nécessite une clé API  \n  👉 [https://platform.openai.com/api-keys](https://platform.openai.com/api-keys)",
        "height": 256,
        "width": 928,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        864,
        -1072
      ],
      "typeVersion": 1,
      "id": "53191a4b-79b4-4244-8d9d-864068fc7de4",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Sauvegarde locale\n\n- Le résultat final est transformé en **JSON** et sauvegardé localement dans :\n  ```bash\n  front-page/data/mails-today.json\nUn Switch oriente la sortie, puis Respond to Webhook renvoie la réponse à l'appelant.",
        "height": 256,
        "width": 720,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1824,
        -1072
      ],
      "typeVersion": 1,
      "id": "7df30ac9-f617-46fa-892d-3e5006299874",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d18ab6ef-bfa8-47b3-a156-a167160ea66c",
              "name": "trigger",
              "value": "webhook",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        496,
        -688
      ],
      "id": "78a7b186-f014-4447-8cdf-62aaec3bc183",
      "name": "Edit Fields (Webhook)"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2646868f-7983-48f8-b488-93fa8c7113d1",
              "name": "trigger",
              "value": "schedule",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        496,
        -528
      ],
      "id": "f64781a6-be6c-4bb1-9eea-c7553d9631c8",
      "name": "Edit Fields (Schedule)"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "84f42e36-b7cd-4387-a0b9-fb17caa32b6b",
              "name": "trigger",
              "value": "manual",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        496,
        -352
      ],
      "id": "1ba61098-bf0b-4598-b9c1-50b88095b16f",
      "name": "Edit Fields (Manual)"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1504,
        -528
      ],
      "id": "1665dd69-786f-4243-be92-76e39e715ae3",
      "name": "Merge Results"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "/files/mails-today.json",
        "dataPropertyName": "=data",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        2032,
        -528
      ],
      "id": "ecf40ac1-85d6-4ee7-890b-0468652506fb",
      "name": "Write Files from Disk",
      "retryOnFail": true,
      "notesInFlow": false
    },
    {
      "parameters": {
        "content": "## 🚀 Quick Start\n\n\n- Configurer les credentials **Gmail** et **OpenAI API Key**.\n\n- Lancer n8n : `docker-compose up -d` puis ouvrir [http://localhost:5678](http://localhost:5678).    \n\n- Activer le workflow et tester : `curl -X POST http://localhost:5678/webhook/refresh-mails`.  \n\n- Les mails traités sont sauvegardés dans `front-page/data/mails-today.json`.  \n",
        "height": 384,
        "width": 256
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -48,
        -784
      ],
      "typeVersion": 1,
      "id": "25bf6ed1-180c-4b3a-8687-8959d7acc99a",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        672,
        -544
      ],
      "id": "7d1243f3-15e3-46cc-b93a-cc68e0769c02",
      "name": "Merge Trigger"
    }
  ],
  "pinData": {},
  "connections": {
    "Code in JavaScript (2)": {
      "main": [
        [
          {
            "node": "Code in JavaScript (3)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript (3)": {
      "main": [
        [
          {
            "node": "Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many messages": {
      "main": [
        [
          {
            "node": "Code in JavaScript (1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields (Schedule)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript (1)": {
      "main": [
        [
          {
            "node": "Merge Results",
            "type": "main",
            "index": 0
          },
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields (Webhook)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Edit Fields (Manual)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Merge Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Edit Fields (Webhook)": {
      "main": [
        [
          {
            "node": "Merge Trigger",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Edit Fields (Schedule)": {
      "main": [
        [
          {
            "node": "Merge Trigger",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Edit Fields (Manual)": {
      "main": [
        [
          {
            "node": "Merge Trigger",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge Results": {
      "main": [
        [
          {
            "node": "Code in JavaScript (2)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write Files from Disk": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Trigger": {
      "main": [
        [
          {
            "node": "Get many messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "58cda5d8-0734-4341-a4dc-092bc8648523",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "753a48bddbc5ffd4854cd4218c5777586e198aa86ca66321df29a494a59fd543"
  },
  "id": "ns2zu9zjBOIu1Qwb",
  "tags": []
}